{"version":3,"sources":["components/Stat/Stat.js","components/FeedbackOpt/FeedbackOpt.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Stat","bad","good","neutral","posotiveFeedback","total","countTotalFeedback","FeedbackOpt","handleChangeState","type","onClick","Section","children","console","log","feedback","stats","Notification","App","useState","setGood","setNeutral","setBad","e","nameState","target","textContent","state","Math","round","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAgCeA,G,MA9BF,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,IAAKC,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,iBAC5BC,GAAQC,EAD+D,EAAzBA,sBAEpD,OACE,4BACE,4BACE,oCAAUJ,EAAV,MAEF,4BACE,uCAAaC,EAAb,MAEF,4BACE,mCAASF,EAAT,MAEF,4BACE,qCAAWI,EAAX,MAEF,4BACE,iDAAuBD,IAAvB,UCEOG,EAnBK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACrB,OACE,6BACE,4BAAQC,KAAK,SAASC,QAASF,GAA/B,QAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,WAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,SCMSG,EAfC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,QAAQC,IAAIF,GADoB,kBAENA,EAFM,GAEzBG,EAFyB,KAEfC,EAFe,KAGhC,OACE,6BACE,4DACCD,EACD,6BACE,4CACCC,KCLMC,EAJM,WACnB,OAAO,mDCwDMC,EApDH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTjB,EADS,KACHkB,EADG,OAEcD,mBAAS,GAFvB,mBAEThB,EAFS,KAEAkB,EAFA,OAGMF,mBAAS,GAHf,mBAGTlB,EAHS,KAGJqB,EAHI,KAuBVhB,EAAqB,WAEzB,OADYJ,EAAOC,EAAUF,GAU/B,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAaO,kBA/BS,SAAAe,GACxB,IAAMC,EAAYD,EAAEE,OAAOC,YAE3B,OADAb,QAAQC,IAAIU,GACJA,GACN,IAAK,OACHJ,GAAQ,SAAAO,GAAK,OAAIA,EAAQ,KACzBd,QAAQC,IAAIZ,GACZ,MACF,IAAK,MACHoB,GAAO,SAAAK,GAAK,OAAIA,EAAQ,KACxB,MACF,IAAK,UACHN,GAAW,SAAAM,GAAK,OAAIA,EAAQ,SAoB7BrB,IACC,kBAAC,EAAD,CACEJ,KAAMA,EACNC,QAASA,EACTF,IAAKA,EACLG,iBAfgC,WACtC,OAAKF,EAGE0B,KAAKC,MAAc,IAAP3B,EAAcI,IAAqBwB,QAAQ,IAFrD,GAcHxB,mBAAoBA,IAGtB,kBAAC,EAAD,QChDRyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.cb289d47.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nconst Stat = ({ bad, good, neutral, posotiveFeedback, countTotalFeedback }) => {\n  const total = countTotalFeedback();\n  return (\n    <ul>\n      <li>\n        <p> Good:{good} </p>\n      </li>\n      <li>\n        <p>Neutral: {neutral} </p>\n      </li>\n      <li>\n        <p> Bad:{bad} </p>\n      </li>\n      <li>\n        <p> Total:{total} </p>\n      </li>\n      <li>\n        <p> Positive feedback:{posotiveFeedback()}% </p>\n      </li>\n    </ul>\n  );\n};\nStat.propTypes = {\n  bad: PropTypes.number.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  posotiveFeedback: PropTypes.func.isRequired,\n  countTotalFeedback: PropTypes.func.isRequired,\n};\n\nexport default Stat;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nconst FeedbackOpt = ({ handleChangeState }) => {\n  return (\n    <div>\n      <button type=\"button\" onClick={handleChangeState}>\n        Good\n      </button>\n      <button type=\"button\" onClick={handleChangeState}>\n        Neutral\n      </button>\n      <button type=\"button\" onClick={handleChangeState}>\n        Bad\n      </button>\n    </div>\n  );\n};\nFeedbackOpt.propTypes = {\n  handleChangeState: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOpt;\n","import React from 'react';\n\nconst Section = ({ children }) => {\n  console.log(children);\n  const [feedback, stats] = children;\n  return (\n    <div>\n      <h2> Please leave your feedback </h2>\n      {feedback}\n      <div>\n        <h2> Statistics </h2>\n        {stats}\n      </div>\n    </div>\n  );\n};\n\nexport default Section;\n","import React from 'react';\n\nconst Notification = () => {\n  return <h3>No feedback given </h3>;\n};\n\nexport default Notification;\n","import React, { Component, useState } from 'react';\nimport './App.css';\nimport Stat from './components/Stat/Stat';\nimport FeedbackOpt from './components/FeedbackOpt/FeedbackOpt';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleChangeState = e => {\n    const nameState = e.target.textContent;\n    console.log(nameState);\n    switch (nameState) {\n      case 'Good':\n        setGood(state => state + 1);\n        console.log(good);\n        break;\n      case 'Bad':\n        setBad(state => state + 1);\n        break;\n      case 'Neutral':\n        setNeutral(state => state + 1);\n\n      default:\n        break;\n    }\n  };\n  const countTotalFeedback = () => {\n    const res = good + neutral + bad;\n    return res;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    if (!good) {\n      return 0;\n    }\n    return Math.round((good * 100) / countTotalFeedback().toFixed(2));\n  };\n\n  return (\n    <Section>\n      <FeedbackOpt handleChangeState={handleChangeState} />\n      {countTotalFeedback() ? (\n        <Stat\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          posotiveFeedback={countPositiveFeedbackPercentage}\n          countTotalFeedback={countTotalFeedback}\n        />\n      ) : (\n        <Notification />\n      )}\n    </Section>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   handleChangeState = e => {\n//     const nameState = e.target.textContent.toLowerCase();\n//     this.setState(prev => ({\n//       [nameState]: prev[nameState] + 1,\n//     }));\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const res = good + neutral + bad;\n//     return res;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     if (!this.state.good) {\n//       return 0;\n//     }\n//     return Math.round(\n//       (this.state.good * 100) / this.countTotalFeedback().toFixed(2),\n//     );\n//   };\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     return (\n//       <Section>\n//         <FeedbackOpt handleChangeState={this.handleChangeState} />\n//         {this.countTotalFeedback() ? (\n//           <Stat\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             posotiveFeedback={this.countPositiveFeedbackPercentage}\n//             countTotalFeedback={this.countTotalFeedback}\n//           />\n//         ) : (\n//           <Notification />\n//         )}\n//       </Section>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}